{
	"info": {
		"_postman_id": "fe0a7074-d2ae-4a3c-b902-0d31f29e2033",
		"name": "Aleksandra_Tikhonova",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29464109"
	},
	"item": [
		{
			"name": "Lecture-1",
			"item": [
				{
					"name": "Receiving tokens",
					"item": [
						{
							"name": "Add Admin (technical, for single use only)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Admin_username\",jsonData.username);\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Admin_password\",jsonData.password);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"BASE_URL\",\"http://qa-school-test-api.quantori.academy\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"username\": \"Aleksandra_Tikhonova\", \"firstName\": \"Aleksandra\", \"lastName\": \"Tikhonova\", \"email\": \"alexandra.tikhonova@quantori.academy\", \"password\": \"Superpassword!123\", \"role\": \"admin\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://qa-school-test-api.quantori.academy/api/v1/users",
									"protocol": "http",
									"host": [
										"qa-school-test-api",
										"quantori",
										"academy"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"StudentToken\", jsonData.accessToken);\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Sasha student\",\r\n  \"password\": \"mysuperpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"TeacherToken\", jsonData.accessToken);\r",
											" \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Anton teacher\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that password field influences on validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that login field influences on validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add different types of users",
					"item": [
						{
							"name": "Add Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Admin_username\",jsonData.username);\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Admin_password\",jsonData.password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"username\": \"{{$randomNoun}}{{$randomNoun}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomNoun}}\", \r\n\"email\": \"{{$randomEmail}}\", \r\n\"password\": \"{{$randompassword}}\",\r\n \"role\": \"admin\" \r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_username\",jsonData.username);\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_password\",jsonData.password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"{{$randomNoun}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Student_username\",jsonData.username);\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Student_password\",jsonData.password);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"student\",\r\n  \"firstName\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"lastName\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"password\": \"mysuperpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to create admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"admin\",\r\n  \"firstName\": \"{{$randomName}}\",\r\n  \"lastName\": \"{{$randomName}}\",\r\n  \"password\": \"vasyapupkin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to create admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"admin\",\r\n  \"firstName\": \"{{$randomName}}\",\r\n  \"lastName\": \"{{$randomName}}\",\r\n  \"password\": \"vasyapupkin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to create another type of user with the same credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"username\": \"Aleksandra_Tikhonova\", \"firstName\": \"Aleksandra\", \"lastName\": \"Tikhonova\", \"email\": \"alexandra.tikhonova@quantori.academy\", \"password\": \"Superpassword!123\", \"role\": \"teacher\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users try to add a new category",
					"item": [
						{
							"name": "New category_Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_title\", jsonData.title);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "New category 2 Technical_Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id2\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category2_title\", jsonData.title);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "New category 3 Technical_Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id3\", jsonData.id);\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category3_title\", jsonData.title);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to create a new category with already existing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title should be unique\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{category_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to create a category with ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"const myRandomString = generateRandomString(5);\r",
											"pm.collectionVariables.set('random_id', myRandomString);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{$random_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to add a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to add a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT instead of POST to add a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with 100 characters in the title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Lorem ipsum doloе sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidunt {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with 3 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"L{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with 2 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with 101 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Lorem ipsum dolor sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidunt {{$randomAlphaNumeric}}{{$randomAlphaNumeric}} \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with numbers and space in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\":\"123{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}345 \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with only spaces in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with special symbols in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"_,g{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with a leading space in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \" {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with leading zero in the name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"const myRandomString = generateRandomString(5);\r",
											"pm.collectionVariables.set('random_id', myRandomString);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"0{{random_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with null instead  of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with false instead  of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with empty string instead of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category upper-case character in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}Lov{{category2_title}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a category with a name that is the same as a part of the name of an already existing category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Lov{{category2_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users see the whole list of categories",
					"item": [
						{
							"name": "Teacher tries to see the list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has the required properties\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"        pm.expect(course).to.have.property('title');\r",
											"        pm.expect(course).to.have.property('updatedAt');\r",
											"        pm.expect(course).to.have.property('createdAt');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to see the list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has the required properties\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"        pm.expect(course).to.have.property('title');\r",
											"        pm.expect(course).to.have.property('updatedAt');\r",
											"        pm.expect(course).to.have.property('createdAt');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to see the list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has the required properties\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"        pm.expect(course).to.have.property('title');\r",
											"        pm.expect(course).to.have.property('updatedAt');\r",
											"        pm.expect(course).to.have.property('createdAt');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users try to find a category by its ID",
					"item": [
						{
							"name": "Admin tries to find a category by its id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to find a category by its id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to find a category by its id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to find a category by non-existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/50000000",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"50000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to find a category with very big id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/19999999990",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"19999999990"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to find a category with very previous id-1 (finding boundaries)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/1999999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"1999999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to GET a category with id=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users try to update categories",
					"item": [
						{
							"name": "TECHNICAL for further updating DELETING an existing category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\")\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to update inexisting category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response contains the error message\", function () {\r",
											"    var error = pm.response.json().errors[0];\r",
											"    pm.expect(error).to.be.a('string').and.to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "TECHNICAL Add a category for further updating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_title\", jsonData.title);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating if there isn't name string in JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response contains the error message\", function () {\r",
											"    var error = pm.response.json().errors[0];\r",
											"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to update a category with the same name as this category has",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id3}},\r\n  \"title\": \"{{category3_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to update categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category2_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}},\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to update a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category2_title\",jsonData.title);\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}},\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to update category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category2_title\",jsonData.title);\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}},\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with 100 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}}, \r\n  \"title\": \"Lorem ipsum dolor sit ametr consectetuyr adipiscinh elitp sed diam nonummy nibh euismod tincidu{{$randomAlphaNumeric}}t {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with 3 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"u{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with 2 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with 101 characters in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}} rem ipsum dolor sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidunt uty\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with numbers and space in the name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"const myRandomString = generateRandomString(5);\r",
											"pm.collectionVariables.set('random_id', myRandomString);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \"{{random_id}} {{random_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with only spaces in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with special symbols in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \"_,{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with a leading space in the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": \" {{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category with leading zero in the name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"const myRandomString = generateRandomString(5);\r",
											"pm.collectionVariables.set('random_id', myRandomString);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":¨{{category_id}},\r\n  \"title\": \"0{{random_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with null instead  of name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\":{{category_id}},\r\n  \"title\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with  already existing alphabetic name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{category2_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "TECHNICAL update a category with numeric name. FOR FURTHER TESTS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category2_title\",jsonData.title);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}},\r\n  \"title\": \"{{random_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with  already existing numeric name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{category2_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with FALSE instead of valid values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with empty string instead of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response should contain an error message\", function () {\r",
											"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "TECHNICAL update a category with name containing an upper-case symbol FOR FURTHER CHECKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category3_title\",jsonData.title);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category3_id}},\r\n  \"title\": \"{{$randomNoun}}A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with an already existing name containing upper-case character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title should be unique\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"{{category3_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "TECHNICAL update a category. FOR FURTHER CHECKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category3_id}},\r\n  \"title\": \"{{$randomNoun}}Lov{{category3_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a category name with a name that is the same as a part of the name of an already existing category Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category3_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category_id}},\r\n  \"title\": \"Lov{{category3_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users try to delete categories",
					"item": [
						{
							"name": "Admin tries to Delete an existing category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\")\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to delete inexisting category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* It should be status 404 with error message instead of 200 */\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response contains the error message\", function () {\r",
											"    var error = pm.response.json().errors[0];\r",
											"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to delete a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to delete a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id3}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to delete category with id=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* It should be status 404 with error message instead of 200 */\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response contains the error message\", function () {\r",
											"    var error = pm.response.json().errors[0];\r",
											"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to delete a category with negative id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* It should be status 400 with error message instead of 200 */\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response contains the error message\", function () {\r",
											"    var error = pm.response.json().errors[0];\r",
											"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{negative_course_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{negative_course_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Lecture-2",
			"item": [
				{
					"name": "Receiving an access token for admin Technical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/session",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add the first category for lecture-2 Technical",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"category_id\",jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add the second category for lecture-2 Technical",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"category2_id\",jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Receive Student token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"StudentToken\",jsonData.accessToken);\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Sasha student\",\r\n  \"password\": \"mysuperpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/session",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Receive Teacher token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"TeacherToken\", jsonData.accessToken);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Anton teacher\",\r\n  \"password\": \"mypassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/session",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to add a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to add a course to inexisting category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unable to find category record(s)\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 100 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Lorem ipsum doloе sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidun{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 100 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Lorem ipsum doloе sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidun{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 3 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 3 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 2 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 2 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*There is no ddescription of number of symbols in API docs*/\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with 101 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*There is no requirements for the number of symbols in documentation. According to ¨common sense¨ the limit could be 100 charachters.*/\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Lorem ipsum dolor sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidunt {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with numbers and space in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\":\" 123{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with numbers and space in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\":\" 123{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with only spaces in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"   \",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with only spaces in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"   \",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with special symbols in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"_,{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with special symbols in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"_,{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with a leading space in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \" {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with a leading space in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \" {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with leading zero in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"0{{$randomIP}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with leading zero in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\":\"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"0{{$randomIP}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with null instead  of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": null,\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with null instead  of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": null,\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with false instead  of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": false,\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with false instead  of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": false,\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with empty string instead of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with empty string instead of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains an error message\", function () {\r",
									"    pm.response.json().errors.forEach(function (error) {\r",
									"        pm.expect(error.msg).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course upper-case character in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"fLOwer{{$randomNoun}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course upper-case character in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"fLOwer{{$randomNoun}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with a name that is the same as a part of the name of an already existing category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{title_course}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course with invalid value in Visible field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{title_course}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": {{$randomNoun}},\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to add a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to see the added course in the list of courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\"{{course_id}}\"});\r",
									"pm.test(\"Body matches string\", function (){\"{{title_course}}\"});\r",
									"pm.test(\"Body matches string\", function () {\"{{description_course}}\"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to get a course by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT instead of POST Teacher tries to add a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Course updating by a teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category2_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT instead of PATCH Course updating by a teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"There is no such endpoint\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category2_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to update a course with the same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislike strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{title_course}}\",\r\n  \"description\": \"{{desciption_course}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Course updating by a student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 100 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"Lorem ipsum doloе sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidun{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 100 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"Lorem ipsum doloе sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidun{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 3 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 3 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 2 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 2 characters in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*There is no ddescription of number of symbols in API docs*/\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with 101 characters in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*There is no requirements for the number of symbols in documentation. According to ¨common sense¨ the limit could be 100 charachters*/\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"Lorem ipsum dolor sit ametr consectetuer adipiscing elitp sed diam nonummy nibh euismod tincidunt {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with numbers and space in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\":\" 123{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with numbers and space in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\":\" 123{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with only spaces in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"   \",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with only spaces in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
									"/*There is no such a requirement in API docs, but it's better to be consistent. If empty field isn't allowed, \"only spaces\" should not be allowed too */\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains an error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error').that.is.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"   \",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with special symbols in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"_,{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with special symbols in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"_,{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with a leading space in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \" {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with a leading space in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \" {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with leading zero in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"000\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with leading zero in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\":\"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"0123\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with null instead  of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": null,\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with null instead  of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": null,\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with false instead  of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": false,\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with false instead  of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": false,\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with empty string instead of name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response should contain an error message\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with empty string instead of description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.be.an('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course upper-case character in the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"fLOwer{{$randomNoun}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course upper-case character in the description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"fLOwer{{$randomNoun}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with a name that is the same as a part of the name of an already existing category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{title_course}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a course with invalid value in Visible field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{title_course}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": {{$randomNoun}},\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to update a course with another category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Response should contain Likes and Dislikes strings, but there are not.*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"{{title_course}}\",\r\n  \"description\": \"{{description_course}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category2_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course by teacher (technical for further checks))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to create a course with already existing credentials in another category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title should be unique\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title_course}}\",\r\n  \"description\": \"{{description_course}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category2_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to create a course with already existing credentials in the same category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title should be unique\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title_course}}\",\r\n  \"description\": \"{{description_course}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course by teacher (technical for further checks))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to delete a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\")\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to delete an inexisting course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* It should be status 404 instead of 400 */\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response contains the error message\", function () {\r",
									"    var error = pm.response.json().errors[0];\r",
									"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to delete the course with id=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*It should be status 404 instead of 400 */\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response contains the error message\", function () {\r",
									"    var error = pm.response.json().errors[0];\r",
									"    pm.expect(error.msg).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unable to find course record(s)\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to update inexisting course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a course by teacher (technical for further checks))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
									" var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to delete a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to delete a course using negative id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/-{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"-{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to see the whole list of courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the array has the required properties\", function () {\r",
									"    pm.response.json().forEach(function (course) {\r",
									"        pm.expect(course).to.have.property('id');\r",
									"        pm.expect(course).to.have.property('title');\r",
									"        pm.expect(course).to.have.property('description');\r",
									"        pm.expect(course).to.have.property('visible');\r",
									"        pm.expect(course).to.have.property('categoryId');\r",
									"        pm.expect(course).to.have.property('likes');\r",
									"        pm.expect(course).to.have.property('dislikes');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to see the specific course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.visible).to.exist;\r",
									"    pm.expect(responseData.categoryId).to.exist;\r",
									"    pm.expect(responseData.likes).to.exist;\r",
									"    pm.expect(responseData.dislikes).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student tries to see the specific course with id =0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{StudentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to see the specific course with id =0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to see the specific course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.visible).to.exist;\r",
									"    pm.expect(responseData.categoryId).to.exist;\r",
									"    pm.expect(responseData.likes).to.exist;\r",
									"    pm.expect(responseData.dislikes).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher tries to see the whole list of courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the array has the required properties\", function () {\r",
									"    pm.response.json().forEach(function (course) {\r",
									"        pm.expect(course).to.have.property('id');\r",
									"        pm.expect(course).to.have.property('title');\r",
									"        pm.expect(course).to.have.property('description');\r",
									"        pm.expect(course).to.have.property('visible');\r",
									"        pm.expect(course).to.have.property('categoryId');\r",
									"        pm.expect(course).to.have.property('likes');\r",
									"        pm.expect(course).to.have.property('dislikes');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TeacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not authorized user try to see the list of courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not authorized user tries to delete the course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not authorized user tries to see the specific course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not authorized user tries to update a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{course_id}}\" ,\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not authorized user treis to add a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"description\": \"{{$randomProductName}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lecture-3",
			"item": [
				{
					"name": "Scenario 1. Admin manages users",
					"item": [
						{
							"name": "Receiving an access token for admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to add a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Student_username\",jsonData.username);\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Student_password\",jsonData.password);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"student\",\r\n  \"firstName\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"lastName\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"password\": \"mysuperpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to add a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_username\",jsonData.username);\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_password\",jsonData.password);\r",
											"   var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_id\",jsonData.id); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"{{$randomNoun}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to delete a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_username\",jsonData.username);\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Teacher_password\",jsonData.password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomNoun}}{{$randomNoun}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"{{$randomNoun}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers/{{Teacher_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers",
										"{{Teacher_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2.",
					"item": [
						{
							"name": "Receiving an access token for admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin creates a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_title\", jsonData.title);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"TeacherToken\", jsonData.accessToken);\r",
											" \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Anton teacher\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to add a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to see the added course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"    pm.expect(responseData.description).to.exist;\r",
											"    pm.expect(responseData.visible).to.exist;\r",
											"    pm.expect(responseData.categoryId).to.exist;\r",
											"    pm.expect(responseData.likes).to.exist;\r",
											"    pm.expect(responseData.dislikes).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Receiving an access token for admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin creates a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_title\", jsonData.title);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to see the list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has the required properties\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"        pm.expect(course).to.have.property('title');\r",
											"        pm.expect(course).to.have.property('updatedAt');\r",
											"        pm.expect(course).to.have.property('createdAt');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to find a category by its id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories/{{category_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to update categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"category2_title\",jsonData.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{category2_id}},\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to add a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin tries to get a course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
											"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Receiving an access token for admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"AdminToken\", jsonData.accessToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Aleksandra_Tikhonova\",\r\n  \"password\": \"Superpassword!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin creates a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_title\", jsonData.title);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomNoun}}{{$randomNoun}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"TeacherToken\", jsonData.accessToken);\r",
											" \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Anton teacher\",\r\n  \"password\": \"mypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher tries to add a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response should contain updatedAT and createdAT strings, but there are not.*/\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
											"});\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"course_id\",jsonData.id);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"title_course\",jsonData.title);\r",
											" var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"desciption_course\",jsonData.description);\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Receiving an access token for student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"StudentToken\", jsonData.accessToken);\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Sasha student\",\r\n  \"password\": \"mysuperpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/session",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student tries to get a course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    pm.expect(pm.response.text()).to.include(\"visible\");\r",
											"    pm.expect(pm.response.text()).to.include(\"categoryId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"dislikes\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{StudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses/{{course_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "negative_course_id",
			"value": ""
		},
		{
			"key": "BASE_URL",
			"value": ""
		},
		{
			"key": "AdminToken",
			"value": ""
		},
		{
			"key": "TeacherToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "StudentToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "course_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "title_course",
			"value": ""
		},
		{
			"key": "desciption_course",
			"value": ""
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "category2_id",
			"value": ""
		},
		{
			"key": "category_id2",
			"value": ""
		},
		{
			"key": "category_id3",
			"value": ""
		},
		{
			"key": "category_title",
			"value": ""
		},
		{
			"key": "random_id",
			"value": ""
		},
		{
			"key": "idtest",
			"value": ""
		},
		{
			"key": "randomCharacter",
			"value": ""
		},
		{
			"key": "category2_title",
			"value": ""
		},
		{
			"key": "Admin_username",
			"value": ""
		},
		{
			"key": "Admin_password",
			"value": ""
		},
		{
			"key": "Teacher_username",
			"value": ""
		},
		{
			"key": "Teacher_password",
			"value": ""
		},
		{
			"key": "Student_username",
			"value": ""
		},
		{
			"key": "Student_password",
			"value": ""
		},
		{
			"key": "category3_title",
			"value": ""
		},
		{
			"key": "Teacher_id",
			"value": ""
		}
	]
}